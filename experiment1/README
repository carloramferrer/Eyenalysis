Eyenalysis - A simple method to estimate similarity between eye movement
sequences (Experiment 1)

Copyright 2011-2012 Sebastiaan Mathot
<http://www.cogsci.nl/>

1. INTRODUCTION
===============
This README describes how to analyze a set of artificial eye movement data with
three algorithms: Eyenalysis, Levenshtein, and ScanMatch. There are two classes
of eye movements, generated from two pictures, and the goal of the algorithms
is to classify which eye movement pattern belongs to which picture. To this end,
a distance measure is used in combination with K-Means clustering. The K-Means
clustering is the same for the three algorithms, so the crux of the test is the
distance measure.

To see how well the algorithms deal with noisy data, noise is added to the
artificial datasets. There are 200 levels of noise.

The analysis described below (steps 4.3 to 4.6) will be performed 10 times, in
order to get reliable data and error bars.

2. DEPENDENCIES
===============
Eyenalysis <https://github.com/smathot/eyenalysis>
iLab NeuroMorphic vision toolkit <http://ilab.usc.edu/toolkit/screenshots.shtml>
ScanMatch <http://eis.bris.ac.uk/~psidg/ScanMatch/>

3. FOLDERS AND FILES
====================
README							This file
pic/							Source pictures
plots/							Data plots
raster1/						Scanpath visualisation for picture1
raster2/						Scanpath visualisation for picture2
results/						Contains end-stage output files (graphs etc.)
run/							Contains the data generated for each run
run/[#]/log/					Noiselogs
run/[#]/scanmatch/				Output data generated by ScanMatch
run/[#]/score/					Score files
run/[#]/strings/				Strings generated from noiselogs
scripts/						Contains all the scripts
scripts/chance_level.py			Estimates the chance level percentage
scripts/contrast.py				Plot the contrast data
scripts/compare.m				MatLab file used for ScanMatch
scripts/compare_eyenalysis.py	Perform clustering using Eyenalysis
scripts/compare_levenshtein.py	Perform clustering using Levenshtein
scripts/compare_scanmatch.py	Perform clustering using ScanMatch
scripts/createnoiselogs.py		Generate noiselogs from artificial scanpaths
scripts/descriptives.py			Calculate the descriptive statistics
scripts/noiselogstostrings.py	Convert noiselogs into strings
scripts/plot.py					Plot the main results data

4. ANALYSIS RECIPE
==================

4.1. DOWNLOAD PICTURES
======================
These pictures are rescaled to 1280x960 and saved as pic/pic1.png and
pic/pic2.png respectively.

Picture 1:
http://commons.wikimedia.org/wiki/File:Eiffel_tower_and_the_seine_at_night.jpg

Picture 2:
http://commons.wikimedia.org/wiki/File:Oer-Weimarer_Musenhof.jpg

4.2. GENERATE TWO ARTIFICIAL SCANPATHS
======================================
Artificial scanpaths are generated from the two pictures using the iLab
Neuromorphic Vision C++ toolkit <http://ilab.usc.edu/toolkit/screenshots.shtml>.
This results in two logfiles, which are stored in the log/ folder and two series
of visualizations, which are stored in the raster1/ and raster2/ folders
respectively.

Commands:
/opt/ezvision/ezvision --in=pic/pic1.png -T --output-frames=0-20@EVENT
	--out=display --textlog=log/log1.txt -+
/opt/ezvision/ezvision --in=pic/pic2.png -T --output-frames=0-20@EVENT
	--out=display --textlog=log/log2.txt -+

4.4. GENERATE NOISY SCANPATHS
=============================
Generate scanpaths with various levels of noise, which are stored in the
noiselogs/ folder. Trials 0-49 are based on picture 1, trials 50-99 on picture
2.

Command:
python scripts/createnoiselogs.py

4.4. CONVERT NOISELOGS TO STRINGS
=================================
Convert the noiselogs to strings for the levenshtein and scanmatch algorithms.
The results are stored in the strings folder.

python scripts/noiselogstostrings.py

4.5. PROCESS THE DATA IN MATLAB USING SCANMATCH
===============================================
Using the compare.m script, ScanMatch <http://eis.bris.ac.uk/~psidg/ScanMatch/>
is applied to the strings. The resulting output file is saved as
scanmatch/scanmatch_output.txt.

The following (non-default) parameters should be used for the ScanMatch Info
Struct:
- Number of bins X = 26, Y = 26
- Roi Modulus = 26
- Substituion Matrix Threshold = 19 (2x the standard deviation of the saccade
  size as determined by noiselogstostrings.py)

4.6. PERFORM CLUSTERING
=======================
Commands:
python scripts/compare_eyenalysis > score/eyenalysis.csv
python scripts/compare_levenshtein > score/levenshtein.csv
python scripts/compare_scanmatch > score/scanmatch.csv

4.7. ANALYZE RESULTS
====================
The summarize script generates the average clustering accuracies and standard
error per noise level and method. This output can be used for creating graphs.

python scripts/summarize.py > results/summary.csv

4.8. ESTIMATE CHANCE LEVEL
==========================
Due to the method for determining clustering accuracy. chance level is slightly
above 50%. This script performs the clustering using random data, to determine
chance level.

python scripts/chance_level.py > chance_level.csv

4.9. PLOT THE DATA
==================
Plot the data with the following scripts. This will generate .svg files.

python scripts/plot.py
python scripts/contrast.py
